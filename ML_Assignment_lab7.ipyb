{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tarunv1807/ML_ASSIGNMENT/blob/main/ML_Assignment_lab7.ipyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "c399327c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c399327c",
        "outputId": "8a6fb21d-3557-41ed-bab9-17d4dade37ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Support Vectors =[[ 9.  9.]\n",
            " [ 7.  7.]\n",
            " [10. 10.]\n",
            " ...\n",
            " [10. 10.]\n",
            " [10. 10.]\n",
            " [ 6.  6.]]\n"
          ]
        }
      ],
      "source": [
        "#A1\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "data = pd.read_excel('/content/outputfinal (2).xlsx')\n",
        "\n",
        "features = data[['target_text', 'target_text']]\n",
        "target = data['input_text']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "\n",
        "clf = SVC()\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "support_vectors = clf.support_vectors_\n",
        "\n",
        "print(f'Support Vectors ={support_vectors}')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "e0ca90f9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "e0ca90f9",
        "outputId": "5b0ce9d7-cb0c-4713-8cdb-c90dbbd43f59"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-0ddf00fd5340>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#A2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'target_text'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'input_text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Accuracy of the SVM on the test set: {accuracy}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3811\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3812\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3813\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3814\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3815\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6068\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6070\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6072\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6132\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6133\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6135\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['input_text'] not in index\""
          ]
        }
      ],
      "source": [
        "#A2\n",
        "\n",
        "accuracy = clf.score(X_test[['target_text', 'input_text']], y_test)\n",
        "print(f\"Accuracy of the SVM on the test set: {accuracy}\")\n",
        "\n",
        "test_vector = X_test[['target_text', 'input_text']].iloc[0]\n",
        "predicted_class = clf.predict([test_vector])\n",
        "print(f\"The predicted class for the test vector: {predicted_class}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "883fc380",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "883fc380",
        "outputId": "9affbddf-affc-4f85-9c60-d09994c7275e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictions: ['#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain()\\n{\\n\\tint i,j,k,n,s,t,p,y;\\n\\tscanf(\"%d\",&t);\\n\\tfor(i=0;i<t;i++)\\n\\t{\\n\\t\\tp=0;\\n\\t\\ty=0;\\n\\t\\tscanf(\"%d%d%d\",&n,&k,&s);\\n\\t   for(j=1;j<=s;j++)\\n\\t   {\\n\\t   \\t      n=n-k;\\n\\t   \\t       p++;\\n\\t   \\t    if(n<0 && j%7==0)\\n\\t   \\t  {\\n\\t\\t\\t printf(\"-1\\\\n\");\\n\\t\\t\\t y++;\\n\\t\\t\\t break;\\n\\t\\t  }\\n\\t   \\t  if(n<0 && j>=7)\\n\\t   \\t  break;\\n\\t   }\\n\\t   if(y==0)\\n\\t  {\\n\\t   s=s-(p-1);\\n\\t   printf(\"%d\\\\n\",s);\\n      }\\n\\t}\\n}'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include <stdio.h>\\n#include <string.h>\\nvoid main()\\n{\\n    int low=0,mid,high=9,i;\\n    float x[10],y;\\n    printf(\"Enter 10 values:\");\\n    for(i=0;i<10;i++)\\n        scanf(\"%f\",&x[i]);\\n    printf(\"Enter number to be searched for in the list:\");\\n    scanf(\"%f\",&y);\\n   while (low<=high)\\n    {   mid = (low+high)/2;\\n        if (y<x[mid])\\n            high = mid - 1;\\n        else if (y>x[mid])\\n            low = mid + 1;\\n        else \\n            printf(\"%f is the needed value\",x[mid]);\\n          // break;\\n}\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include<stdio.h>\\nvoid main()\\n{\\n    int array[50],number,i,position,value;\\n    printf(\"Enter the number of elemets to be in a array:\");\\n    scanf(\"%d\",&number);\\n    printf(\"Enter %d elements\\\\n\", number);\\n    for(i=0;i<number;i++)\\n    scanf(\"%d\",&array[i]);\\n    printf(\"Enter the position or location where the change should happen:\");\\n    scanf(\"%d\",&position);\\n    printf(\"Enter the value:\\\\n\");\\n    scanf(\"%d\",&value);\\n    for(i = number - 1;i>=position-1;i--)\\n    array[i+1] = array[i];\\n    array[position-1]=value;\\n    printf(\"The result is \\\\n\");\\n    for(i=0;i<= number;i++)\\n    printf(\"%d\\\\n\",array[i]);\\n    }'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include <stdio.h>\\nint main()\\n{\\n    int n,a[10],i,pos,key;\\n    printf(\"enter the number of elements\");\\n    scanf(\"%d\",&n);\\n    printf(\"enter the aaray elements\");\\n    for(i=0;i<n;i++)\\n    scanf(\"%d\",&a[i]);\\n    printf(\"enter the key and position should be inserted\");\\n    scanf(\"%d,%d\",&key&pos);\\n    for(i=0;i<n;i++)\\n    {\\n        for(i=n;i>pos;i--)\\n        a[i]=a[i-1];\\n    }\\n    a[pos]=key;\\n    n++;\\n    printf(\"enter the updated array \");\\n    for(i=0;i<n;i++)\\n    printf(\"%d\\\\n\"a[i]);\\n    \\n}\\n'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n'\n",
            " '#include<stdio.h>\\nmain(){\\t\\n\\t int n,l,r,i,t,a;\\n\\t scanf(\"%d\",&t);\\n\\t while(t--){\\n\\t \\t\\tscanf(\"%d %d\",&l,&r);\\n\\t \\t\\ta=l;\\n\\t \\t\\ti=1;\\n\\t \\twhile(i<r){\\n\\t \\t\\ta=a^(i+1);\\n\\t \\t\\ti++;\\n\\t\\t}\\n\\t\\t\\t\\t\\tif(a%2==0)\\n\\t\\t\\t\\t\\t\\tprintf(\"Even\\\\n\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintf(\"Odd\\\\n\");\\n\\t}\\n}\\n'\n",
            " '#include<stdio.h>\\nvoid sub(long long int *m, long long int *b)\\n{\\n    if(*m > *b)\\n    {\\n        *m = *m - *b;\\n    }\\n    else if(*b > *m)\\n    {\\n        *b = *b - *m;\\n    }\\n    \\n}\\nint main()\\n{\\n     long long int t, m,b;\\n    scanf(\"%d\",&t);\\n    while(t--)\\n    {\\n        scanf(\"%lld %lld\",&m,&b);\\n        while((m==b)||(m==0)||(b==0))\\n        {\\n            sub(&m,&b);\\n        }\\n        printf(\"%d\\\\n\",(m+b));\\n    }\\n    return(0);\\n}'\n",
            " '#include<stdio.h>\\n#include<stdlib.h>\\n#include<conio.h>\\n\\n// Structure to create a node with data and the next pointer//\\n\\nstruct Node\\n{\\n   int data;\\n   struct Node *next;\\n}\\n\\n//Declare top as NULL//\\n\\n*top = NULL;\\n\\n//function declarations//\\n\\nvoid push(int);\\nvoid pop();\\nvoid display();\\n\\n// Main function//\\n\\nvoid main()\\n{\\n   int choice, item;\\n   printf(\"\\\\nIMPLEMENTATION OF STACK USING LINKED LIST\\\\n\");\\n   while(1)\\n   {\\n      printf(\"\\\\nSELECT THE OPERATION TO BE PERFORMED\\\\n\");\\n      printf(\"1. Push\\\\n2. Pop\\\\n3. Display\\\\n4. Exit\\\\n\");\\n      printf(\"Enter your choice: \");\\n      scanf(\"%d\",&choice);\\n      switch(choice)\\n      {\\n         case 1: printf(\"Enter the item to be insert: \");\\n                 scanf(\"%d\", &item);\\n                 push(item);\\n                 break;\\n         case 2: pop();\\n             break;\\n         case 3: display(); \\n             break;\\n         case 4: exit(0);\\n         default: printf(\"\\\\nWrong selection!!!\\\\n Please try again!!!\\\\n\");\\n      }\\n   }\\n}\\n// Push() operation on a  stack//\\n\\nvoid push(int item)\\n{\\n   struct Node *ptr;\\n   \\n   //getting new node to store the data//\\n   \\n   ptr = (struct Node*)malloc(sizeof(struct Node));\\n   \\n   //storing data in the new node//\\n   \\n   ptr->data = item;\\n   if(top == NULL)\\n      ptr->next = NULL;\\n   else\\n      ptr->next = top;\\n   top = ptr;\\n   printf(\"\\\\nInsertion is Success!!!\\\\n\");\\n}\\n\\n// Pop() operation on a  stack//\\nvoid pop()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      printf(\"\\\\nDeleted element: %d\", ptr1->data);\\n      top = ptr1->next;\\n      free(ptr1);\\n   }\\n}\\n// display() operation on a  stack//\\nvoid display()\\n{\\n   if(top == NULL)\\n      printf(\"\\\\nStack is Empty!!!\\\\n\");\\n   else{\\n      struct Node *ptr1 = top;\\n      while(ptr1->next != NULL){\\n         printf(\"%d--->\",ptr1->data);\\n         ptr1 = ptr1 -> next;\\n      }\\n      printf(\"%d--->NULL\",ptr1->data);\\n   }\\n}\\n\\n\\n']\n",
            "Sample 1: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 2: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 3: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 4: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 5: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 6: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 7: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 8: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 9: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 10: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 11: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 12: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 13: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 14: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 15: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 16: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 17: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 18: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 19: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 20: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 21: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 22: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 23: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 24: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 25: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 26: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 27: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 28: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 29: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 30: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 31: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 32: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 33: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 34: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 35: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 36: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 37: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 38: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 39: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 40: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 41: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 42: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 43: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 44: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 45: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 46: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 47: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 48: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 49: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 50: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 51: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 52: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 53: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 54: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 55: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 56: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 57: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 58: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 59: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 60: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 61: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 62: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 63: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 64: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 65: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 66: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 67: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 68: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 69: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 70: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 71: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 72: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 73: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 74: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 75: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 76: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 77: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 78: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 79: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 80: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 81: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 82: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 83: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 84: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 85: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 86: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 87: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 88: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 89: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 90: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 91: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 92: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 93: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 94: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 95: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 96: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 97: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 98: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 99: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 100: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 101: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 102: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 103: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 104: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 105: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 106: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 107: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 108: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 109: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 110: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 111: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 112: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 113: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 114: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 115: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 116: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 117: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 118: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 119: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 120: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 121: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 122: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 123: Predicted class #include<stdio.h>\n",
            "main()\n",
            "{\n",
            "\tint i,j,k,n,s,t,p,y;\n",
            "\tscanf(\"%d\",&t);\n",
            "\tfor(i=0;i<t;i++)\n",
            "\t{\n",
            "\t\tp=0;\n",
            "\t\ty=0;\n",
            "\t\tscanf(\"%d%d%d\",&n,&k,&s);\n",
            "\t   for(j=1;j<=s;j++)\n",
            "\t   {\n",
            "\t   \t      n=n-k;\n",
            "\t   \t       p++;\n",
            "\t   \t    if(n<0 && j%7==0)\n",
            "\t   \t  {\n",
            "\t\t\t printf(\"-1\\n\");\n",
            "\t\t\t y++;\n",
            "\t\t\t break;\n",
            "\t\t  }\n",
            "\t   \t  if(n<0 && j>=7)\n",
            "\t   \t  break;\n",
            "\t   }\n",
            "\t   if(y==0)\n",
            "\t  {\n",
            "\t   s=s-(p-1);\n",
            "\t   printf(\"%d\\n\",s);\n",
            "      }\n",
            "\t}\n",
            "}\n",
            "Sample 124: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 125: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 126: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 127: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 128: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 129: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 130: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 131: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 132: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 133: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 134: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 135: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 136: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 137: Predicted class #include <stdio.h>\n",
            "#include <string.h>\n",
            "void main()\n",
            "{\n",
            "    int low=0,mid,high=9,i;\n",
            "    float x[10],y;\n",
            "    printf(\"Enter 10 values:\");\n",
            "    for(i=0;i<10;i++)\n",
            "        scanf(\"%f\",&x[i]);\n",
            "    printf(\"Enter number to be searched for in the list:\");\n",
            "    scanf(\"%f\",&y);\n",
            "   while (low<=high)\n",
            "    {   mid = (low+high)/2;\n",
            "        if (y<x[mid])\n",
            "            high = mid - 1;\n",
            "        else if (y>x[mid])\n",
            "            low = mid + 1;\n",
            "        else \n",
            "            printf(\"%f is the needed value\",x[mid]);\n",
            "          // break;\n",
            "}\n",
            "}\n",
            "Sample 138: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 139: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 140: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 141: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 142: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 143: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 144: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 145: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 146: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 147: Predicted class #include<stdio.h>\n",
            "void main()\n",
            "{\n",
            "    int array[50],number,i,position,value;\n",
            "    printf(\"Enter the number of elemets to be in a array:\");\n",
            "    scanf(\"%d\",&number);\n",
            "    printf(\"Enter %d elements\\n\", number);\n",
            "    for(i=0;i<number;i++)\n",
            "    scanf(\"%d\",&array[i]);\n",
            "    printf(\"Enter the position or location where the change should happen:\");\n",
            "    scanf(\"%d\",&position);\n",
            "    printf(\"Enter the value:\\n\");\n",
            "    scanf(\"%d\",&value);\n",
            "    for(i = number - 1;i>=position-1;i--)\n",
            "    array[i+1] = array[i];\n",
            "    array[position-1]=value;\n",
            "    printf(\"The result is \\n\");\n",
            "    for(i=0;i<= number;i++)\n",
            "    printf(\"%d\\n\",array[i]);\n",
            "    }\n",
            "Sample 148: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 149: Predicted class #include <stdio.h>\n",
            "int main()\n",
            "{\n",
            "    int n,a[10],i,pos,key;\n",
            "    printf(\"enter the number of elements\");\n",
            "    scanf(\"%d\",&n);\n",
            "    printf(\"enter the aaray elements\");\n",
            "    for(i=0;i<n;i++)\n",
            "    scanf(\"%d\",&a[i]);\n",
            "    printf(\"enter the key and position should be inserted\");\n",
            "    scanf(\"%d,%d\",&key&pos);\n",
            "    for(i=0;i<n;i++)\n",
            "    {\n",
            "        for(i=n;i>pos;i--)\n",
            "        a[i]=a[i-1];\n",
            "    }\n",
            "    a[pos]=key;\n",
            "    n++;\n",
            "    printf(\"enter the updated array \");\n",
            "    for(i=0;i<n;i++)\n",
            "    printf(\"%d\\n\"a[i]);\n",
            "    \n",
            "}\n",
            "\n",
            "Sample 150: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Sample 151: Predicted class #include<stdio.h>\n",
            "main(){\t\n",
            "\t int n,l,r,i,t,a;\n",
            "\t scanf(\"%d\",&t);\n",
            "\t while(t--){\n",
            "\t \t\tscanf(\"%d %d\",&l,&r);\n",
            "\t \t\ta=l;\n",
            "\t \t\ti=1;\n",
            "\t \twhile(i<r){\n",
            "\t \t\ta=a^(i+1);\n",
            "\t \t\ti++;\n",
            "\t\t}\n",
            "\t\t\t\t\tif(a%2==0)\n",
            "\t\t\t\t\t\tprintf(\"Even\\n\");\n",
            "\t\t\t\t\telse\n",
            "\t\t\t\t\t\tprintf(\"Odd\\n\");\n",
            "\t}\n",
            "}\n",
            "\n",
            "Sample 152: Predicted class #include<stdio.h>\n",
            "void sub(long long int *m, long long int *b)\n",
            "{\n",
            "    if(*m > *b)\n",
            "    {\n",
            "        *m = *m - *b;\n",
            "    }\n",
            "    else if(*b > *m)\n",
            "    {\n",
            "        *b = *b - *m;\n",
            "    }\n",
            "    \n",
            "}\n",
            "int main()\n",
            "{\n",
            "     long long int t, m,b;\n",
            "    scanf(\"%d\",&t);\n",
            "    while(t--)\n",
            "    {\n",
            "        scanf(\"%lld %lld\",&m,&b);\n",
            "        while((m==b)||(m==0)||(b==0))\n",
            "        {\n",
            "            sub(&m,&b);\n",
            "        }\n",
            "        printf(\"%d\\n\",(m+b));\n",
            "    }\n",
            "    return(0);\n",
            "}\n",
            "Sample 153: Predicted class #include<stdio.h>\n",
            "#include<stdlib.h>\n",
            "#include<conio.h>\n",
            "\n",
            "// Structure to create a node with data and the next pointer//\n",
            "\n",
            "struct Node\n",
            "{\n",
            "   int data;\n",
            "   struct Node *next;\n",
            "}\n",
            "\n",
            "//Declare top as NULL//\n",
            "\n",
            "*top = NULL;\n",
            "\n",
            "//function declarations//\n",
            "\n",
            "void push(int);\n",
            "void pop();\n",
            "void display();\n",
            "\n",
            "// Main function//\n",
            "\n",
            "void main()\n",
            "{\n",
            "   int choice, item;\n",
            "   printf(\"\\nIMPLEMENTATION OF STACK USING LINKED LIST\\n\");\n",
            "   while(1)\n",
            "   {\n",
            "      printf(\"\\nSELECT THE OPERATION TO BE PERFORMED\\n\");\n",
            "      printf(\"1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n\");\n",
            "      printf(\"Enter your choice: \");\n",
            "      scanf(\"%d\",&choice);\n",
            "      switch(choice)\n",
            "      {\n",
            "         case 1: printf(\"Enter the item to be insert: \");\n",
            "                 scanf(\"%d\", &item);\n",
            "                 push(item);\n",
            "                 break;\n",
            "         case 2: pop();\n",
            "             break;\n",
            "         case 3: display(); \n",
            "             break;\n",
            "         case 4: exit(0);\n",
            "         default: printf(\"\\nWrong selection!!!\\n Please try again!!!\\n\");\n",
            "      }\n",
            "   }\n",
            "}\n",
            "// Push() operation on a  stack//\n",
            "\n",
            "void push(int item)\n",
            "{\n",
            "   struct Node *ptr;\n",
            "   \n",
            "   //getting new node to store the data//\n",
            "   \n",
            "   ptr = (struct Node*)malloc(sizeof(struct Node));\n",
            "   \n",
            "   //storing data in the new node//\n",
            "   \n",
            "   ptr->data = item;\n",
            "   if(top == NULL)\n",
            "      ptr->next = NULL;\n",
            "   else\n",
            "      ptr->next = top;\n",
            "   top = ptr;\n",
            "   printf(\"\\nInsertion is Success!!!\\n\");\n",
            "}\n",
            "\n",
            "// Pop() operation on a  stack//\n",
            "void pop()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      printf(\"\\nDeleted element: %d\", ptr1->data);\n",
            "      top = ptr1->next;\n",
            "      free(ptr1);\n",
            "   }\n",
            "}\n",
            "// display() operation on a  stack//\n",
            "void display()\n",
            "{\n",
            "   if(top == NULL)\n",
            "      printf(\"\\nStack is Empty!!!\\n\");\n",
            "   else{\n",
            "      struct Node *ptr1 = top;\n",
            "      while(ptr1->next != NULL){\n",
            "         printf(\"%d--->\",ptr1->data);\n",
            "         ptr1 = ptr1 -> next;\n",
            "      }\n",
            "      printf(\"%d--->NULL\",ptr1->data);\n",
            "   }\n",
            "}\n",
            "\n",
            "\n",
            "\n",
            "Accuracy: 0.0\n"
          ]
        }
      ],
      "source": [
        "#A3\n",
        "features = data[['target_text', 'target_text']]\n",
        "target = data['input_text']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "\n",
        "predictions = clf.predict(X_test)\n",
        "print(\"Predictions:\", predictions)\n",
        "\n",
        "for i, prediction in enumerate(predictions):\n",
        "    print(f\"Sample {i + 1}: Predicted class {prediction}\")\n",
        "\n",
        "accuracy = sum(predictions == y_test) / len(y_test)\n",
        "print(\"Accuracy:\", accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "697e43f6",
      "metadata": {
        "id": "697e43f6",
        "outputId": "49ff281f-86fa-4fce-ead7-009f9874c0ec",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kernel: linear, Accuracy: 0.00%\n",
            "Kernel: poly, Accuracy: 0.00%\n",
            "Kernel: rbf, Accuracy: 0.00%\n",
            "Kernel: sigmoid, Accuracy: 0.00%\n"
          ]
        }
      ],
      "source": [
        "#A4\n",
        "from sklearn import svm\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "features = data[['target_text', 'target_text']]\n",
        "target = data['input_text']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "\n",
        "kernel_functions = ['linear', 'poly', 'rbf', 'sigmoid']\n",
        "\n",
        "for kernel in kernel_functions:\n",
        "\n",
        "    clf = svm.SVC(kernel=kernel)\n",
        "    clf.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "    y_pred = clf.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    print(f\"Kernel: {kernel}, Accuracy: {accuracy * 100:.2f}%\")\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}